/* 
 * Azure Game Day - RPSLS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AzureGameDay.SDK.Client.OpenAPIDateConverter;

namespace AzureGameDay.SDK.Model
{
    /// <summary>
    /// MatchSetup
    /// </summary>
    [DataContract]
    public partial class MatchSetup :  IEquatable<MatchSetup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchSetup" /> class.
        /// </summary>
        /// <param name="challengerId">challengerId.</param>
        /// <param name="matchId">matchId.</param>
        /// <param name="matchSequenceNumber">matchSequenceNumber.</param>
        public MatchSetup(string challengerId = default(string), string matchId = default(string), long matchSequenceNumber = default(long))
        {
            this.ChallengerId = challengerId;
            this.MatchId = matchId;
            this.MatchSequenceNumber = matchSequenceNumber;
        }
        
        /// <summary>
        /// Gets or Sets ChallengerId
        /// </summary>
        [DataMember(Name="challengerId", EmitDefaultValue=false)]
        public string ChallengerId { get; set; }

        /// <summary>
        /// Gets or Sets MatchId
        /// </summary>
        [DataMember(Name="matchId", EmitDefaultValue=false)]
        public string MatchId { get; set; }

        /// <summary>
        /// Gets or Sets MatchSequenceNumber
        /// </summary>
        [DataMember(Name="matchSequenceNumber", EmitDefaultValue=false)]
        public long MatchSequenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchSetup {\n");
            sb.Append("  ChallengerId: ").Append(ChallengerId).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  MatchSequenceNumber: ").Append(MatchSequenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchSetup);
        }

        /// <summary>
        /// Returns true if MatchSetup instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchSetup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChallengerId == input.ChallengerId ||
                    (this.ChallengerId != null &&
                    this.ChallengerId.Equals(input.ChallengerId))
                ) && 
                (
                    this.MatchId == input.MatchId ||
                    (this.MatchId != null &&
                    this.MatchId.Equals(input.MatchId))
                ) && 
                (
                    this.MatchSequenceNumber == input.MatchSequenceNumber ||
                    this.MatchSequenceNumber.Equals(input.MatchSequenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChallengerId != null)
                    hashCode = hashCode * 59 + this.ChallengerId.GetHashCode();
                if (this.MatchId != null)
                    hashCode = hashCode * 59 + this.MatchId.GetHashCode();
                hashCode = hashCode * 59 + this.MatchSequenceNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
