// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using team_management_api.Data;

namespace team_management_api.Migrations
{
    [DbContext(typeof(AdventureDayBackendDbContext))]
    partial class AdventureDayBackendDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("team_management_api.Data.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("team_management_api.Data.Runner.RunnerProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentPhase")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhaseConfigurations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunnerStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RunnerProperties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentPhase = "Phase1_Deployment",
                            Name = "default",
                            PhaseConfigurations = @"{
  ""Phase1_Deployment"": {
    ""RequestExecutorLatencyMillis"": 1000,
    ""PlayerTypes"": [
      0
    ]
  },
  ""Phase2_Change"": {
    ""RequestExecutorLatencyMillis"": 1000,
    ""PlayerTypes"": [
      0
    ]
  },
  ""Phase3_Monitoring"": {
    ""RequestExecutorLatencyMillis"": 1000,
    ""PlayerTypes"": [
      0
    ]
  },
  ""Phase4_Scale"": {
    ""RequestExecutorLatencyMillis"": 100,
    ""PlayerTypes"": [
      0
    ]
  },
  ""Phase5_Security"": {
    ""RequestExecutorLatencyMillis"": 500,
    ""PlayerTypes"": [
      0
    ]
  },
  ""Phase6_Intelligence"": {
    ""RequestExecutorLatencyMillis"": 500,
    ""PlayerTypes"": [
      1
    ]
  }
}",
                            RunnerStatus = "Stopped"
                        });
                });

            modelBuilder.Entity("team_management_api.Data.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameEngineUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("team_management_api.Data.TeamLogEntry", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponeTimeMs")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TeamId", "Id");

                    b.HasIndex("Timestamp");

                    b.ToTable("TeamLogEntries");
                });

            modelBuilder.Entity("team_management_api.Data.TeamScore", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Costs")
                        .HasColumnType("int");

                    b.Property<int>("Errors")
                        .HasColumnType("int");

                    b.Property<int>("Income")
                        .HasColumnType("int");

                    b.Property<int>("Loses")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.ToTable("TeamScores");
                });

            modelBuilder.Entity("team_management_api.Data.Member", b =>
                {
                    b.HasOne("team_management_api.Data.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("team_management_api.Data.TeamLogEntry", b =>
                {
                    b.HasOne("team_management_api.Data.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("team_management_api.Data.TeamScore", b =>
                {
                    b.HasOne("team_management_api.Data.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
